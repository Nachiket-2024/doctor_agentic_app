# ---------------------------- External Imports ----------------------------

# For managing SQLAlchemy database sessions  
from sqlalchemy.orm import Session

# ---------------------------- Internal Imports ----------------------------

# Import Admin model to check if user is an admin  
from ..models.admin_model import Admin

# Import Doctor model to check if user is a doctor  
from ..models.doctor_model import Doctor

# Import Patient model to check if user is a patient or to create one if new  
from ..models.patient_model import Patient

# ---------------------------- Role Determination Logic ----------------------------

def determine_user_role_and_id(email: str, db: Session) -> tuple[str, int]:
    """
    Determines the role of the user (admin, doctor, patient) based on their email.
    If no match is found, a new patient is created.
    
    Parameters:
    - email (str): The email address to check.
    - db (Session): The SQLAlchemy database session.

    Returns:
    - tuple[str, int]: A tuple containing the role ('admin' | 'doctor' | 'patient') and user ID.
    """

    # -------- Step 1: Check if the user is an admin --------
    admin = db.query(Admin).filter(Admin.email == email).first()
    if admin:
        # If admin exists, return role and ID
        return "admin", admin.id

    # -------- Step 2: Check if the user is a doctor --------
    doctor = db.query(Doctor).filter(Doctor.email == email).first()
    if doctor:
        # If doctor exists, return role and ID
        return "doctor", doctor.id

    # -------- Step 3: Check if the user is a patient --------
    patient = db.query(Patient).filter(Patient.email == email).first()
    if not patient:
        # If patient doesn't exist, create a new patient record
        patient = Patient(
            name=email.split('@')[0],  # Use part of the email as the name
            email=email
        )
        db.add(patient)         # Add to session
        db.commit()             # Commit transaction
        db.refresh(patient)     # Refresh to get autogenerated ID

    # Return 'patient' role and ID
    return "patient", patient.id
